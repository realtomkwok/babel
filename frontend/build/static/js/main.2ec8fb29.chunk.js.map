{"version":3,"sources":["App.jsx","serviceWorker.js","index.js"],"names":["SplashBanner","className","children","noWrap","icon","Component","InputField","this","props","value","LangSelect","handleChange","index","item","selectedLanguage","getAttribute","onLanguageChange","language","enhanced","label","onEnhancedChange","options","SpeakButton","handleClick","data","fromLanguage","toLanguage","selectOneValue","selectTwoValue","showMsg","msg","fetch","method","headers","Headers","Accept","body","JSON","stringify","then","res","json","response","onResultChange","transcribedResult","translatedResult","error","console","log","onClick","App","onSelectOne","setState","user1_fromLang","user2_toLang","user1_result","onSelectTwo","user2_fromLang","user1_toLang","user2_result","onResultChangeOne","onResultChangeTwo","toggleBanner","splashBanner_open","state","onFocus","onBlur","tabIndex","desktopColumns","tabletColumns","phoneColumns","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2ec8fb29.chunk.js","sourcesContent":["import React, {Component} from 'react';\n//import Material Components\nimport {Cell, Grid, Row} from '@material/react-layout-grid';\nimport Select from '@material/react-select';\nimport MaterialIcon from '@material/react-material-icon';\nimport Fab from '@material/react-fab';\nimport TextLoop from 'react-text-loop';\n// import {Snackbar} from '@material/react-snackbar';\nimport TopAppBar, {\n  TopAppBarFixedAdjust,\n  TopAppBarIcon,\n  TopAppBarRow,\n  TopAppBarSection,\n  TopAppBarTitle\n} from \"@material/react-top-app-bar\";\nimport MenuSurface, {Corner} from '@material/react-menu-surface';\n//import stylesheet\nimport './App.scss';\nimport List, { ListItem, ListItemText } from '@material/react-list';\n\nclass SplashBanner extends Component {\n  render() {\n    return (\n      <div className=\"splashBanner\">\n        <div className=\"splashBanner-header\">\n          <h2 className=\"splashBanner-logo\">Babel</h2>\n          <div className=\"splashBanner-container\">\n            {/* TODO: Multi-language of the introduction */}\n            <div className=\"splashBanner-greeting\">\n              <TextLoop\n                children={[\"Hello!\", \"您好！\", \"你好！\"]}\n                noWrap\n              ></TextLoop>\n            </div >\n            <div className=\"splashBanner-content\">\n              <TextLoop>\n                <span>To get started, <br></br> simply select your language and tap the <MaterialIcon className=\"inlineIcon\" icon=\"mic\" /> to speak.</span>\n                <span>请选择语言，<br></br> 轻触 <MaterialIcon className=\"inlineIcon\" icon=\"mic\" /> 即可轻松开始。</span>\n                {/* <span>Para comenzar, <br></br> seleccione los idiomas y toque <MaterialIcon className=\"inlineIcon\" icon=\"mic\" /> para hablar.</span> */}\n                <span>請揀選語言，<br></br> 輕點 <MaterialIcon className=\"inlineIcon\" icon=\"mic\" /> 即可開始。</span>\n                {/* <span>始めるには、<br></br> 言語を選択し、<MaterialIcon className=\"inlineIcon\" icon=\"mic\" /> をタップして話します</span> */}\n              </TextLoop>\n            </div>\n          </div>\n        </div>\n        <div className=\"splashBanner-backdrop\"></div>\n      </div>\n    );\n  }\n}\n\nclass AppBar extends Component {\n  state = {\n    open: false,\n    anchorElement: null,\n    selectedIndex: 0,\n  };\n\n  setAnchorElement = (element) => {\n    if (this.state.anchorElement) {\n      return;\n    }\n    this.setState({anchorElement: element});\n  }\n\n  handleClick = () => {\n    this.setState({open: false})\n  }\n\n  render() {\n    return (\n      <div>\n        <TopAppBar className=\"topAppBar\">\n          <TopAppBarRow>\n            <TopAppBarSection align=\"start\">\n              {/* <TopAppBarIcon navIcon tabIndex={0}>\n                <MaterialIcon\n                  hasRipple\n                  icon=\"menu\"\n                  onClick={() => this.setState({ open: !this.state.open })}\n                />\n              </TopAppBarIcon> */}\n              <TopAppBarTitle>Babel</TopAppBarTitle>\n            </TopAppBarSection>\n            <TopAppBarSection align=\"end\" role=\"toolbar\">\n              <div className='mdc-menu-surface--anchor' ref={this.setAnchorElement}>\n                <TopAppBarIcon actionItem tabIndex={0} onClick={() => this.setState({ open: true })}>\n                    <MaterialIcon\n                      aria-label=\"language\"\n                      hasRipple\n                      icon=\"language\"\n                    />\n                </TopAppBarIcon>\n                <MenuSurface\n                  open={this.state.open}\n                  anchorCorner={Corner.BOTTOM_LEFT}\n                  onClose={() => this.setState({ open: false })}\n                  anchorElement={this.state.anchorElement}\n                >\n                  <List onClick={this.handleClick} twoLine dense wrapFocus selectedIndex={this.state.selectedIndex} handleSelect={(selectedIndex) => this.setState({selectedIndex})}>\n                    <ListItem>\n                      <ListItemText primaryText=\"English (US)\" secondaryText=\"English (US)\" />\n                    </ListItem>\n                    <ListItem>\n                      <ListItemText primaryText=\"中文（简体）\" secondaryText=\"Chinese (Simplified)\" />\n                    </ListItem>\n                    <ListItem>\n                      <ListItemText primaryText=\"中文（繁體）\" secondaryText=\"Chinese (Traditional)\" /> \n                    </ListItem>\n                  </List>\n                </MenuSurface>\n                </div>\n            </TopAppBarSection>\n          </TopAppBarRow>\n        </TopAppBar>\n        <TopAppBarFixedAdjust />\n      </div>\n    );\n  }\n};\n\nclass InputField extends Component {\n  render() {\n    return (\n    <div className=\"inputField\">\n      {this.props.value}\n    </div>\n    );\n  }\n}\n\nclass LangSelect extends Component {\n\n  handleChange = (index, item) => {\n    const selectedLanguage = item.getAttribute('data-value')\n    this.props.onLanguageChange(selectedLanguage);\n  }\n\n  render() {\n    const language = this.props.language\n    const langOptions = [{\n      label: 'Chinese (Mandarin)',\n      value: 'mandarin',\n    }, {\n      label: 'Chinese (Cantonese)',\n      value: 'cantonese',\n    }, {\n      label: 'English (US)',\n      value: 'american-english',\n    }]\n    return (\n      <Select\n        enhanced\n        // outlined\n        label=\"Choose Language\"\n        value={language}\n        onEnhancedChange={this.handleChange}\n        options={langOptions}\n        className=\"select-alternate\"\n      >\n\n      </Select>\n    );\n  }\n}\n\nclass SpeakButton extends Component {\n\n  handleClick = () => {\n    var data = {\n      fromLanguage: this.props.fromLanguage,\n      toLanguage: this.props.toLanguage,\n      selectOneValue: this.props.selectOneValue,\n      selectTwoValue: this.props.selectTwoValue,\n    }\n    if (data.selectOneValue !== data.selectTwoValue) {\n      if (data.fromLanguage && data.toLanguage !== '') {\n        if (data.fromLanguage === \"zh-CN\") {\n          this.props.showMsg({\n            msg: \"请开始说话...\"\n          });\n        } else if (data.fromLanguage === \"zh-HK\") {\n          this.props.showMsg({\n            msg: \"請開始講話...\"\n          });\n        } else if (data.fromLanguage === \"en-US\") {\n          this.props.showMsg({\n            msg: \"Speak now...\"\n          });\n        }\n        fetch(\"/translate\", {\n          method: \"POST\",\n          headers: new Headers({\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\"\n          }),\n          body: JSON.stringify(data)\n        })\n          .then(res => res.json())\n          .then(\n            response => {\n              this.props.onResultChange({\n                transcribedResult: response[0], //response[0]: transcribed text; response[1]: translated text\n                translatedResult: response[1]\n              });\n            },\n            error => {\n              console.log(\"error happened!\");\n            }\n          );\n      } else {\n        this.props.showMsg({\n          msg: 'Please select an input/output language first.'\n        })\n      }\n    } else {\n      this.props.showMsg({\n        msg: 'Input/Output Language cannot be the same. Please check your selection.'\n      })\n    }\n  }\n\n  render() {\n    return (\n      <Fab\n        onClick={this.handleClick}\n        icon={<MaterialIcon icon=\"mic\" />}\n        className='fab-alternate'\n      ></Fab>\n    );\n  }\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user1_fromLang: \"\",\n      user1_toLang: \"\",\n      user2_fromLang: \"\",\n      user2_toLang: \"\",\n      selectOneValue: \"\",\n      selectTwoValue: \"\",\n      // TODO: the value of these two selecetors should not be the same.\n      user1_result: \"\",\n      user2_result: \"\",\n      splashBanner_open: true\n    };\n  }\n\n  onSelectOne = (value) => {\n    this.setState({\n      selectOneValue: value,\n    })\n    if (value === 'mandarin') {\n      this.setState({\n        user1_fromLang: 'zh-CN',\n        user2_toLang: 'zh-Hans',\n        user1_result: '轻点麦克风图标即可说话',\n      });\n    } else if (value === 'cantonese') {\n      this.setState({\n        user1_fromLang: 'zh-HK',\n        user2_toLang: 'yue',\n        user1_result: '輕點咪高峰圖標即可講話',\n      });\n    } else if (value === 'american-english') {\n      this.setState({\n        user1_fromLang: 'en-US',\n        user2_toLang: 'en',\n        user1_result: 'Tap mic to talk'\n      });\n    }\n  }\n\n  onSelectTwo = (value) => {\n    this.setState({\n      selectTwoValue: value,\n    })\n    if (value === 'mandarin') {\n      this.setState({\n        user2_fromLang: 'zh-CN',\n        user1_toLang: 'zh-Hans',\n        user2_result: '轻点麦克风图标即可说话',\n      });\n    } else if (value === 'cantonese') {\n        this.setState({\n          user2_fromLang: 'zh-HK',\n          user1_toLang: 'yue',\n          user2_result: '輕點咪高峰圖標即可講話',\n        });\n      } else if (value === 'american-english') {\n        this.setState({\n          user2_fromLang: \"en-US\",\n          user1_toLang: \"en\",\n          user2_result: \"Tap mic to talk\"\n        });\n      }\n      \n  }\n\n  onResultChangeOne = (value) => {\n    console.log(value);\n    this.setState({\n      user1_result: value.transcribedResult,\n      user2_result: value.translatedResult,\n    })\n  }\n\n  onResultChangeTwo = (value) => {\n    this.setState({\n      user1_result: value.translatedResult,\n      user2_result: value.transcribedResult,\n    })\n  }\n\n  toggleBanner = () => {\n    this.setState({splashBanner_open: false})\n  }\n\n  render() {\n    return (\n      <div className=\"contentContainer\">\n        <div\n          onFocus={() => this.toggleBanner()}\n          onBlur={() => this.toggleBanner()}\n          tabIndex=\"0\"\n        >\n          {this.state.splashBanner_open && (<SplashBanner></SplashBanner>)}\n        </div>\n        {/* <AppBar></AppBar> */}\n        <Grid>\n          <Row>\n            <Cell desktopColumns={6} tabletColumns={12} phoneColumns={12} className=\"firstUser\">\n              <div className=\"resultInput\">\n                <InputField value={this.state.user1_result} />\n              </div>\n              <div className=\"inputContainer\">\n                <div className=\"langSelector\">\n                  <LangSelect\n                    onLanguageChange={this.onSelectOne}\n                    language={this.state.selectOneValue}\n                  />\n                </div>\n                <div className=\"speakButton\">\n                  <SpeakButton\n                    showMsg={value => {\n                      this.setState({ user1_result: value.msg });\n                    }}\n                    onResultChange={this.onResultChangeOne}\n                    fromLanguage={this.state.user1_fromLang}\n                    toLanguage={this.state.user1_toLang}\n                    selectOneValue={this.state.selectOneValue}\n                    selectTwoValue={this.state.selectTwoValue}\n                  />\n                </div>\n              </div>\n            </Cell>\n            <Cell desktopColumns={6} tabletColumns={12} phoneColumns={12} className=\"secondUser\">\n              <div className=\"resultInput\">\n                <InputField value={this.state.user2_result} />\n              </div>\n              <div className=\"inputContainer\">\n                <div className=\"langSelector\">\n                  <LangSelect\n                    onLanguageChange={this.onSelectTwo}\n                    language={this.state.selectTwoValue}\n                  />\n                </div>\n                <div className=\"speakButton\">\n                  <SpeakButton\n                    showMsg={value => {\n                      this.setState({ user2_result: value.msg });\n                    }}\n                    onResultChange={this.onResultChangeTwo}\n                    fromLanguage={this.state.user2_fromLang}\n                    toLanguage={this.state.user2_toLang}\n                    selectOneValue={this.state.selectOneValue}\n                    selectTwoValue={this.state.selectTwoValue}\n                  />\n                </div>\n              </div>\n            </Cell>\n          </Row>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}